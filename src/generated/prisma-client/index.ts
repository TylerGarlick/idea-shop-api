// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  phone: (where?: PhoneWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressPromise;
  addresses: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Address>;
  addressesConnection: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AddressConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  orderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  orderItems: (
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OrderItem>;
  orderItemsConnection: (
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderItemConnectionPromise;
  phone: (where: PhoneWhereUniqueInput) => PhonePromise;
  phones: (
    args?: {
      where?: PhoneWhereInput;
      orderBy?: PhoneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Phone>;
  phonesConnection: (
    args?: {
      where?: PhoneWhereInput;
      orderBy?: PhoneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PhoneConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (
    args: { data: AddressUpdateInput; where: AddressWhereUniqueInput }
  ) => AddressPromise;
  updateManyAddresses: (
    args: { data: AddressUpdateManyMutationInput; where?: AddressWhereInput }
  ) => BatchPayloadPromise;
  upsertAddress: (
    args: {
      where: AddressWhereUniqueInput;
      create: AddressCreateInput;
      update: AddressUpdateInput;
    }
  ) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateOrderItem: (
    args: { data: OrderItemUpdateInput; where: OrderItemWhereUniqueInput }
  ) => OrderItemPromise;
  updateManyOrderItems: (
    args: {
      data: OrderItemUpdateManyMutationInput;
      where?: OrderItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOrderItem: (
    args: {
      where: OrderItemWhereUniqueInput;
      create: OrderItemCreateInput;
      update: OrderItemUpdateInput;
    }
  ) => OrderItemPromise;
  deleteOrderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createPhone: (data: PhoneCreateInput) => PhonePromise;
  updatePhone: (
    args: { data: PhoneUpdateInput; where: PhoneWhereUniqueInput }
  ) => PhonePromise;
  updateManyPhones: (
    args: { data: PhoneUpdateManyMutationInput; where?: PhoneWhereInput }
  ) => BatchPayloadPromise;
  upsertPhone: (
    args: {
      where: PhoneWhereUniqueInput;
      create: PhoneCreateInput;
      update: PhoneUpdateInput;
    }
  ) => PhonePromise;
  deletePhone: (where: PhoneWhereUniqueInput) => PhonePromise;
  deleteManyPhones: (where?: PhoneWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  phone: (
    where?: PhoneSubscriptionWhereInput
  ) => PhoneSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PhoneKind = "Home" | "Cell" | "Office" | "Other" | "Mobile";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "street1_ASC"
  | "street1_DESC"
  | "street2_ASC"
  | "street2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PhoneOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "number_ASC"
  | "number_DESC"
  | "ext_ASC"
  | "ext_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subtotal_ASC"
  | "subtotal_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "total_ASC"
  | "total_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AddressKind = "Shipping" | "Billing" | "Both" | "Other" | "Home";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AddressUpsertNestedInput {
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export type AddressWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductUpdatetagsInput {
  set?: String[] | String;
}

export interface OrderItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  order?: OrderWhereInput;
  product?: ProductWhereInput;
  AND?: OrderItemWhereInput[] | OrderItemWhereInput;
  OR?: OrderItemWhereInput[] | OrderItemWhereInput;
  NOT?: OrderItemWhereInput[] | OrderItemWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutAddressesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAddressesDataInput;
}

export interface AddressUpdateManyDataInput {
  type?: AddressKind;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
}

export interface UserUpdateWithoutAddressesDataInput {
  email?: String;
  password?: String;
  name?: String;
  phones?: PhoneUpdateManyInput;
  orders?: OrderUpdateManyWithoutUserInput;
}

export interface ProductUpsertWithoutItemsInput {
  update: ProductUpdateWithoutItemsDataInput;
  create: ProductCreateWithoutItemsInput;
}

export interface PhoneUpdateManyInput {
  create?: PhoneCreateInput[] | PhoneCreateInput;
  update?:
    | PhoneUpdateWithWhereUniqueNestedInput[]
    | PhoneUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PhoneUpsertWithWhereUniqueNestedInput[]
    | PhoneUpsertWithWhereUniqueNestedInput;
  delete?: PhoneWhereUniqueInput[] | PhoneWhereUniqueInput;
  connect?: PhoneWhereUniqueInput[] | PhoneWhereUniqueInput;
  set?: PhoneWhereUniqueInput[] | PhoneWhereUniqueInput;
  disconnect?: PhoneWhereUniqueInput[] | PhoneWhereUniqueInput;
  deleteMany?: PhoneScalarWhereInput[] | PhoneScalarWhereInput;
  updateMany?:
    | PhoneUpdateManyWithWhereNestedInput[]
    | PhoneUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PhoneUpdateWithWhereUniqueNestedInput {
  where: PhoneWhereUniqueInput;
  data: PhoneUpdateDataInput;
}

export interface AddressWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: AddressKind;
  type_not?: AddressKind;
  type_in?: AddressKind[] | AddressKind;
  type_not_in?: AddressKind[] | AddressKind;
  street1?: String;
  street1_not?: String;
  street1_in?: String[] | String;
  street1_not_in?: String[] | String;
  street1_lt?: String;
  street1_lte?: String;
  street1_gt?: String;
  street1_gte?: String;
  street1_contains?: String;
  street1_not_contains?: String;
  street1_starts_with?: String;
  street1_not_starts_with?: String;
  street1_ends_with?: String;
  street1_not_ends_with?: String;
  street2?: String;
  street2_not?: String;
  street2_in?: String[] | String;
  street2_not_in?: String[] | String;
  street2_lt?: String;
  street2_lte?: String;
  street2_gt?: String;
  street2_gte?: String;
  street2_contains?: String;
  street2_not_contains?: String;
  street2_starts_with?: String;
  street2_not_starts_with?: String;
  street2_ends_with?: String;
  street2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  longitude?: String;
  longitude_not?: String;
  longitude_in?: String[] | String;
  longitude_not_in?: String[] | String;
  longitude_lt?: String;
  longitude_lte?: String;
  longitude_gt?: String;
  longitude_gte?: String;
  longitude_contains?: String;
  longitude_not_contains?: String;
  longitude_starts_with?: String;
  longitude_not_starts_with?: String;
  longitude_ends_with?: String;
  longitude_not_ends_with?: String;
  latitude?: String;
  latitude_not?: String;
  latitude_in?: String[] | String;
  latitude_not_in?: String[] | String;
  latitude_lt?: String;
  latitude_lte?: String;
  latitude_gt?: String;
  latitude_gte?: String;
  latitude_contains?: String;
  latitude_not_contains?: String;
  latitude_starts_with?: String;
  latitude_not_starts_with?: String;
  latitude_ends_with?: String;
  latitude_not_ends_with?: String;
  isActive?: Boolean;
  isActive_not?: Boolean;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: AddressWhereInput[] | AddressWhereInput;
  OR?: AddressWhereInput[] | AddressWhereInput;
  NOT?: AddressWhereInput[] | AddressWhereInput;
}

export interface PhoneUpdateDataInput {
  type?: PhoneKind;
  number?: String;
  ext?: String;
  isActive?: Boolean;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  addresses_every?: AddressWhereInput;
  addresses_some?: AddressWhereInput;
  addresses_none?: AddressWhereInput;
  phones_every?: PhoneWhereInput;
  phones_some?: PhoneWhereInput;
  phones_none?: PhoneWhereInput;
  orders_every?: OrderWhereInput;
  orders_some?: OrderWhereInput;
  orders_none?: OrderWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PhoneUpsertWithWhereUniqueNestedInput {
  where: PhoneWhereUniqueInput;
  update: PhoneUpdateDataInput;
  create: PhoneCreateInput;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderItemWhereInput;
  AND?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
  OR?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
  NOT?: OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput;
}

export interface PhoneScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: PhoneKind;
  type_not?: PhoneKind;
  type_in?: PhoneKind[] | PhoneKind;
  type_not_in?: PhoneKind[] | PhoneKind;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  ext?: String;
  ext_not?: String;
  ext_in?: String[] | String;
  ext_not_in?: String[] | String;
  ext_lt?: String;
  ext_lte?: String;
  ext_gt?: String;
  ext_gte?: String;
  ext_contains?: String;
  ext_not_contains?: String;
  ext_starts_with?: String;
  ext_not_starts_with?: String;
  ext_ends_with?: String;
  ext_not_ends_with?: String;
  isActive?: Boolean;
  isActive_not?: Boolean;
  AND?: PhoneScalarWhereInput[] | PhoneScalarWhereInput;
  OR?: PhoneScalarWhereInput[] | PhoneScalarWhereInput;
  NOT?: PhoneScalarWhereInput[] | PhoneScalarWhereInput;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AddressWhereInput;
  AND?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  OR?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
  NOT?: AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput;
}

export interface PhoneUpdateManyWithWhereNestedInput {
  where: PhoneScalarWhereInput;
  data: PhoneUpdateManyDataInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  addresses?: AddressUpdateManyWithoutUsersInput;
  phones?: PhoneUpdateManyInput;
  orders?: OrderUpdateManyWithoutUserInput;
}

export interface PhoneUpdateManyDataInput {
  type?: PhoneKind;
  number?: String;
  ext?: String;
  isActive?: Boolean;
}

export interface ProductUpdateManyMutationInput {
  name?: String;
  description?: String;
  price?: Float;
  tags?: ProductUpdatetagsInput;
  isActive?: Boolean;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput;
  delete?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  set?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  disconnect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
  update?:
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  updateMany?:
    | OrderUpdateManyWithWhereNestedInput[]
    | OrderUpdateManyWithWhereNestedInput;
}

export interface OrderItemUpsertWithWhereUniqueWithoutProductInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateWithoutProductDataInput;
  create: OrderItemCreateWithoutProductInput;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface OrderItemUpdateWithWhereUniqueWithoutProductInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateWithoutProductDataInput;
}

export interface OrderUpdateWithoutUserDataInput {
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  items?: OrderItemUpdateManyWithoutOrderInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface OrderItemUpdateManyWithoutProductInput {
  create?:
    | OrderItemCreateWithoutProductInput[]
    | OrderItemCreateWithoutProductInput;
  delete?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  set?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  disconnect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  update?:
    | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    | OrderItemUpdateWithWhereUniqueWithoutProductInput;
  upsert?:
    | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    | OrderItemUpsertWithWhereUniqueWithoutProductInput;
  deleteMany?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  updateMany?:
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput;
}

export interface AddressUpdateOneRequiredInput {
  create?: AddressCreateInput;
  update?: AddressUpdateDataInput;
  upsert?: AddressUpsertNestedInput;
  connect?: AddressWhereUniqueInput;
}

export interface OrderItemCreateWithoutProductInput {
  price?: Float;
  quantity?: Int;
  order: OrderCreateOneWithoutItemsInput;
}

export interface AddressUpdateDataInput {
  type?: AddressKind;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
  users?: UserUpdateManyWithoutAddressesInput;
}

export interface OrderItemCreateManyWithoutProductInput {
  create?:
    | OrderItemCreateWithoutProductInput[]
    | OrderItemCreateWithoutProductInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
}

export interface OrderCreateOneWithoutItemsInput {
  create?: OrderCreateWithoutItemsInput;
  connect?: OrderWhereUniqueInput;
}

export interface PhoneUpdateManyMutationInput {
  type?: PhoneKind;
  number?: String;
  ext?: String;
  isActive?: Boolean;
}

export interface OrderItemUpdateManyWithoutOrderInput {
  create?:
    | OrderItemCreateWithoutOrderInput[]
    | OrderItemCreateWithoutOrderInput;
  delete?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  set?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  disconnect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
  update?:
    | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    | OrderItemUpdateWithWhereUniqueWithoutOrderInput;
  upsert?:
    | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    | OrderItemUpsertWithWhereUniqueWithoutOrderInput;
  deleteMany?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  updateMany?:
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput;
}

export interface PhoneUpdateInput {
  type?: PhoneKind;
  number?: String;
  ext?: String;
  isActive?: Boolean;
}

export interface OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateWithoutOrderDataInput;
}

export interface OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput;
  create: OrderCreateWithoutItemsInput;
}

export interface OrderItemUpdateWithoutOrderDataInput {
  price?: Float;
  quantity?: Int;
  product?: ProductUpdateOneRequiredWithoutItemsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ProductUpdateOneRequiredWithoutItemsInput {
  create?: ProductCreateWithoutItemsInput;
  update?: ProductUpdateWithoutItemsDataInput;
  upsert?: ProductUpsertWithoutItemsInput;
  connect?: ProductWhereUniqueInput;
}

export interface OrderItemUpdateInput {
  price?: Float;
  quantity?: Int;
  order?: OrderUpdateOneRequiredWithoutItemsInput;
  product?: ProductUpdateOneRequiredWithoutItemsInput;
}

export interface ProductUpdateWithoutItemsDataInput {
  name?: String;
  description?: String;
  price?: Float;
  tags?: ProductUpdatetagsInput;
  isActive?: Boolean;
}

export interface UserCreateManyWithoutAddressesInput {
  create?: UserCreateWithoutAddressesInput[] | UserCreateWithoutAddressesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface OrderItemCreateInput {
  price?: Float;
  quantity?: Int;
  order: OrderCreateOneWithoutItemsInput;
  product: ProductCreateOneWithoutItemsInput;
}

export interface PhoneCreateManyInput {
  create?: PhoneCreateInput[] | PhoneCreateInput;
  connect?: PhoneWhereUniqueInput[] | PhoneWhereUniqueInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  isActive?: Boolean;
  isActive_not?: Boolean;
  items_every?: OrderItemWhereInput;
  items_some?: OrderItemWhereInput;
  items_none?: OrderItemWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface OrderCreateManyWithoutUserInput {
  create?: OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateWithoutOrderDataInput;
  create: OrderItemCreateWithoutOrderInput;
}

export interface AddressCreateOneInput {
  create?: AddressCreateInput;
  connect?: AddressWhereUniqueInput;
}

export interface OrderItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  AND?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  OR?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
  NOT?: OrderItemScalarWhereInput[] | OrderItemScalarWhereInput;
}

export interface OrderItemCreateWithoutOrderInput {
  price?: Float;
  quantity?: Int;
  product: ProductCreateOneWithoutItemsInput;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface ProductCreateWithoutItemsInput {
  name: String;
  description?: String;
  price?: Float;
  tags?: ProductCreatetagsInput;
  isActive?: Boolean;
}

export interface OrderItemUpdateManyDataInput {
  price?: Float;
  quantity?: Int;
}

export interface AddressUpdateInput {
  type?: AddressKind;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
  users?: UserUpdateManyWithoutAddressesInput;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  billingAddress?: AddressWhereInput;
  shippingAddress?: AddressWhereInput;
  items_every?: OrderItemWhereInput;
  items_some?: OrderItemWhereInput;
  items_none?: OrderItemWhereInput;
  subtotal?: Float;
  subtotal_not?: Float;
  subtotal_in?: Float[] | Float;
  subtotal_not_in?: Float[] | Float;
  subtotal_lt?: Float;
  subtotal_lte?: Float;
  subtotal_gt?: Float;
  subtotal_gte?: Float;
  tax?: Float;
  tax_not?: Float;
  tax_in?: Float[] | Float;
  tax_not_in?: Float[] | Float;
  tax_lt?: Float;
  tax_lte?: Float;
  tax_gt?: Float;
  tax_gte?: Float;
  total?: Float;
  total_not?: Float;
  total_in?: Float[] | Float;
  total_not_in?: Float[] | Float;
  total_lt?: Float;
  total_lte?: Float;
  total_gt?: Float;
  total_gte?: Float;
  user?: UserWhereInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface OrderScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subtotal?: Float;
  subtotal_not?: Float;
  subtotal_in?: Float[] | Float;
  subtotal_not_in?: Float[] | Float;
  subtotal_lt?: Float;
  subtotal_lte?: Float;
  subtotal_gt?: Float;
  subtotal_gte?: Float;
  tax?: Float;
  tax_not?: Float;
  tax_in?: Float[] | Float;
  tax_not_in?: Float[] | Float;
  tax_lt?: Float;
  tax_lte?: Float;
  tax_gt?: Float;
  tax_gte?: Float;
  total?: Float;
  total_not?: Float;
  total_in?: Float[] | Float;
  total_not_in?: Float[] | Float;
  total_lt?: Float;
  total_lte?: Float;
  total_gt?: Float;
  total_gte?: Float;
  AND?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  OR?: OrderScalarWhereInput[] | OrderScalarWhereInput;
  NOT?: OrderScalarWhereInput[] | OrderScalarWhereInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export interface OrderUpdateManyDataInput {
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  addresses?: AddressCreateManyWithoutUsersInput;
  phones?: PhoneCreateManyInput;
  orders?: OrderCreateManyWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutAddressesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAddressesDataInput;
  create: UserCreateWithoutAddressesInput;
}

export interface OrderItemUpdateWithoutProductDataInput {
  price?: Float;
  quantity?: Int;
  order?: OrderUpdateOneRequiredWithoutItemsInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface ProductUpdateInput {
  name?: String;
  description?: String;
  price?: Float;
  tags?: ProductUpdatetagsInput;
  isActive?: Boolean;
  items?: OrderItemUpdateManyWithoutProductInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ProductCreateInput {
  name: String;
  description?: String;
  price?: Float;
  tags?: ProductCreatetagsInput;
  isActive?: Boolean;
  items?: OrderItemCreateManyWithoutProductInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface OrderItemUpdateManyMutationInput {
  price?: Float;
  quantity?: Int;
}

export interface AddressUpdateManyMutationInput {
  type?: AddressKind;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
}

export interface OrderUpdateOneRequiredWithoutItemsInput {
  create?: OrderCreateWithoutItemsInput;
  update?: OrderUpdateWithoutItemsDataInput;
  upsert?: OrderUpsertWithoutItemsInput;
  connect?: OrderWhereUniqueInput;
}

export interface OrderUpdateManyMutationInput {
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface AddressCreateInput {
  type: AddressKind;
  street1: String;
  street2?: String;
  city: String;
  state: String;
  zip: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
  users?: UserCreateManyWithoutAddressesInput;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface PhoneCreateInput {
  type: PhoneKind;
  number: String;
  ext?: String;
  isActive?: Boolean;
}

export interface OrderCreateInput {
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  items?: OrderItemCreateManyWithoutOrderInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
  user: UserCreateOneWithoutOrdersInput;
}

export interface OrderItemCreateManyWithoutOrderInput {
  create?:
    | OrderItemCreateWithoutOrderInput[]
    | OrderItemCreateWithoutOrderInput;
  connect?: OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface ProductCreatetagsInput {
  set?: String[] | String;
}

export interface UserCreateWithoutOrdersInput {
  email: String;
  password: String;
  name: String;
  addresses?: AddressCreateManyWithoutUsersInput;
  phones?: PhoneCreateManyInput;
}

export interface PhoneWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: PhoneKind;
  type_not?: PhoneKind;
  type_in?: PhoneKind[] | PhoneKind;
  type_not_in?: PhoneKind[] | PhoneKind;
  number?: String;
  number_not?: String;
  number_in?: String[] | String;
  number_not_in?: String[] | String;
  number_lt?: String;
  number_lte?: String;
  number_gt?: String;
  number_gte?: String;
  number_contains?: String;
  number_not_contains?: String;
  number_starts_with?: String;
  number_not_starts_with?: String;
  number_ends_with?: String;
  number_not_ends_with?: String;
  ext?: String;
  ext_not?: String;
  ext_in?: String[] | String;
  ext_not_in?: String[] | String;
  ext_lt?: String;
  ext_lte?: String;
  ext_gt?: String;
  ext_gte?: String;
  ext_contains?: String;
  ext_not_contains?: String;
  ext_starts_with?: String;
  ext_not_starts_with?: String;
  ext_ends_with?: String;
  ext_not_ends_with?: String;
  isActive?: Boolean;
  isActive_not?: Boolean;
  AND?: PhoneWhereInput[] | PhoneWhereInput;
  OR?: PhoneWhereInput[] | PhoneWhereInput;
  NOT?: PhoneWhereInput[] | PhoneWhereInput;
}

export interface AddressCreateManyWithoutUsersInput {
  create?: AddressCreateWithoutUsersInput[] | AddressCreateWithoutUsersInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface AddressCreateWithoutUsersInput {
  type: AddressKind;
  street1: String;
  street2?: String;
  city: String;
  state: String;
  zip: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
}

export type OrderItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderUpdateInput {
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  items?: OrderItemUpdateManyWithoutOrderInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
  user?: UserUpdateOneRequiredWithoutOrdersInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput;
  update?: UserUpdateWithoutOrdersDataInput;
  upsert?: UserUpsertWithoutOrdersInput;
  connect?: UserWhereUniqueInput;
}

export interface OrderCreateWithoutItemsInput {
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
  user: UserCreateOneWithoutOrdersInput;
}

export interface UserUpdateWithoutOrdersDataInput {
  email?: String;
  password?: String;
  name?: String;
  addresses?: AddressUpdateManyWithoutUsersInput;
  phones?: PhoneUpdateManyInput;
}

export interface OrderCreateWithoutUserInput {
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  items?: OrderItemCreateManyWithoutOrderInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface AddressUpdateManyWithoutUsersInput {
  create?: AddressCreateWithoutUsersInput[] | AddressCreateWithoutUsersInput;
  delete?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  set?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  disconnect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  update?:
    | AddressUpdateWithWhereUniqueWithoutUsersInput[]
    | AddressUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | AddressUpsertWithWhereUniqueWithoutUsersInput[]
    | AddressUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  updateMany?:
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyWithoutAddressesInput {
  create?: UserCreateWithoutAddressesInput[] | UserCreateWithoutAddressesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutAddressesInput[]
    | UserUpdateWithWhereUniqueWithoutAddressesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutAddressesInput[]
    | UserUpsertWithWhereUniqueWithoutAddressesInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface AddressUpdateWithWhereUniqueWithoutUsersInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutUsersDataInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: AddressKind;
  type_not?: AddressKind;
  type_in?: AddressKind[] | AddressKind;
  type_not_in?: AddressKind[] | AddressKind;
  street1?: String;
  street1_not?: String;
  street1_in?: String[] | String;
  street1_not_in?: String[] | String;
  street1_lt?: String;
  street1_lte?: String;
  street1_gt?: String;
  street1_gte?: String;
  street1_contains?: String;
  street1_not_contains?: String;
  street1_starts_with?: String;
  street1_not_starts_with?: String;
  street1_ends_with?: String;
  street1_not_ends_with?: String;
  street2?: String;
  street2_not?: String;
  street2_in?: String[] | String;
  street2_not_in?: String[] | String;
  street2_lt?: String;
  street2_lte?: String;
  street2_gt?: String;
  street2_gte?: String;
  street2_contains?: String;
  street2_not_contains?: String;
  street2_starts_with?: String;
  street2_not_starts_with?: String;
  street2_ends_with?: String;
  street2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: String;
  zip_not?: String;
  zip_in?: String[] | String;
  zip_not_in?: String[] | String;
  zip_lt?: String;
  zip_lte?: String;
  zip_gt?: String;
  zip_gte?: String;
  zip_contains?: String;
  zip_not_contains?: String;
  zip_starts_with?: String;
  zip_not_starts_with?: String;
  zip_ends_with?: String;
  zip_not_ends_with?: String;
  longitude?: String;
  longitude_not?: String;
  longitude_in?: String[] | String;
  longitude_not_in?: String[] | String;
  longitude_lt?: String;
  longitude_lte?: String;
  longitude_gt?: String;
  longitude_gte?: String;
  longitude_contains?: String;
  longitude_not_contains?: String;
  longitude_starts_with?: String;
  longitude_not_starts_with?: String;
  longitude_ends_with?: String;
  longitude_not_ends_with?: String;
  latitude?: String;
  latitude_not?: String;
  latitude_in?: String[] | String;
  latitude_not_in?: String[] | String;
  latitude_lt?: String;
  latitude_lte?: String;
  latitude_gt?: String;
  latitude_gte?: String;
  latitude_contains?: String;
  latitude_not_contains?: String;
  latitude_starts_with?: String;
  latitude_not_starts_with?: String;
  latitude_ends_with?: String;
  latitude_not_ends_with?: String;
  isActive?: Boolean;
  isActive_not?: Boolean;
  AND?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  OR?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  NOT?: AddressScalarWhereInput[] | AddressScalarWhereInput;
}

export interface AddressUpsertWithWhereUniqueWithoutUsersInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutUsersDataInput;
  create: AddressCreateWithoutUsersInput;
}

export interface AddressUpdateWithoutUsersDataInput {
  type?: AddressKind;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: String;
  longitude?: String;
  latitude?: String;
  isActive?: Boolean;
}

export type PhoneWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PhoneSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PhoneWhereInput;
  AND?: PhoneSubscriptionWhereInput[] | PhoneSubscriptionWhereInput;
  OR?: PhoneSubscriptionWhereInput[] | PhoneSubscriptionWhereInput;
  NOT?: PhoneSubscriptionWhereInput[] | PhoneSubscriptionWhereInput;
}

export interface ProductCreateOneWithoutItemsInput {
  create?: ProductCreateWithoutItemsInput;
  connect?: ProductWhereUniqueInput;
}

export interface UserCreateWithoutAddressesInput {
  email: String;
  password: String;
  name: String;
  phones?: PhoneCreateManyInput;
  orders?: OrderCreateManyWithoutUserInput;
}

export interface OrderUpdateWithoutItemsDataInput {
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
  user?: UserUpdateOneRequiredWithoutOrdersInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface Phone {
  id: ID_Output;
  type: PhoneKind;
  number: String;
  ext?: String;
  isActive?: Boolean;
}

export interface PhonePromise extends Promise<Phone>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PhoneKind>;
  number: () => Promise<String>;
  ext: () => Promise<String>;
  isActive: () => Promise<Boolean>;
}

export interface PhoneSubscription
  extends Promise<AsyncIterator<Phone>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PhoneKind>>;
  number: () => Promise<AsyncIterator<String>>;
  ext: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  phones: <T = FragmentableArray<Phone>>(
    args?: {
      where?: PhoneWhereInput;
      orderBy?: PhoneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orders: <T = FragmentableArray<Order>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  phones: <T = Promise<AsyncIterator<PhoneSubscription>>>(
    args?: {
      where?: PhoneWhereInput;
      orderBy?: PhoneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  name: String;
  description?: String;
  price?: Float;
  tags: String[];
  isActive?: Boolean;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  tags: () => Promise<String[]>;
  isActive: () => Promise<Boolean>;
  items: <T = FragmentableArray<OrderItem>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface Address {
  id: ID_Output;
  type: AddressKind;
  street1: String;
  street2?: String;
  city: String;
  state: String;
  zip: String;
  longitude?: String;
  latitude?: String;
  isActive: Boolean;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressKind>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  longitude: () => Promise<String>;
  latitude: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressKind>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregatePhone {
  count: Int;
}

export interface AggregatePhonePromise
  extends Promise<AggregatePhone>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhoneSubscription
  extends Promise<AsyncIterator<AggregatePhone>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface PhoneConnection {
  pageInfo: PageInfo;
  edges: PhoneEdge[];
}

export interface PhoneConnectionPromise
  extends Promise<PhoneConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhoneEdge>>() => T;
  aggregate: <T = AggregatePhonePromise>() => T;
}

export interface PhoneConnectionSubscription
  extends Promise<AsyncIterator<PhoneConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhoneEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhoneSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  type: AddressKind;
  street1: String;
  street2?: String;
  city: String;
  state: String;
  zip: String;
  longitude?: String;
  latitude?: String;
  isActive: Boolean;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressKind>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  longitude: () => Promise<String>;
  latitude: () => Promise<String>;
  isActive: () => Promise<Boolean>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressKind>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderItem {
  id: ID_Output;
  price?: Float;
  quantity?: Int;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  quantity: () => Promise<Int>;
  order: <T = OrderPromise>() => T;
  product: <T = ProductPromise>() => T;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  order: <T = OrderSubscription>() => T;
  product: <T = ProductSubscription>() => T;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subtotal: () => Promise<Float>;
  tax: () => Promise<Float>;
  total: () => Promise<Float>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subtotal: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  total: () => Promise<AsyncIterator<Float>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  price?: Float;
  tags: String[];
  isActive?: Boolean;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  tags: () => Promise<String[]>;
  isActive: () => Promise<Boolean>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PhonePreviousValues {
  id: ID_Output;
  type: PhoneKind;
  number: String;
  ext?: String;
  isActive?: Boolean;
}

export interface PhonePreviousValuesPromise
  extends Promise<PhonePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PhoneKind>;
  number: () => Promise<String>;
  ext: () => Promise<String>;
  isActive: () => Promise<Boolean>;
}

export interface PhonePreviousValuesSubscription
  extends Promise<AsyncIterator<PhonePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PhoneKind>>;
  number: () => Promise<AsyncIterator<String>>;
  ext: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface PhoneSubscriptionPayload {
  mutation: MutationType;
  node: Phone;
  updatedFields: String[];
  previousValues: PhonePreviousValues;
}

export interface PhoneSubscriptionPayloadPromise
  extends Promise<PhoneSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhonePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhonePreviousValuesPromise>() => T;
}

export interface PhoneSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhoneSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhoneSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhonePreviousValuesSubscription>() => T;
}

export interface Order {
  id: ID_Output;
  subtotal?: Float;
  tax?: Float;
  total?: Float;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  billingAddress: <T = AddressPromise>() => T;
  shippingAddress: <T = AddressPromise>() => T;
  items: <T = FragmentableArray<OrderItem>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subtotal: () => Promise<Float>;
  tax: () => Promise<Float>;
  total: () => Promise<Float>;
  user: <T = UserPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  billingAddress: <T = AddressSubscription>() => T;
  shippingAddress: <T = AddressSubscription>() => T;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(
    args?: {
      where?: OrderItemWhereInput;
      orderBy?: OrderItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subtotal: () => Promise<AsyncIterator<Float>>;
  tax: () => Promise<AsyncIterator<Float>>;
  total: () => Promise<AsyncIterator<Float>>;
  user: <T = UserSubscription>() => T;
}

export interface OrderItemPreviousValues {
  id: ID_Output;
  price?: Float;
  quantity?: Int;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  quantity: () => Promise<Int>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface PhoneEdge {
  node: Phone;
  cursor: String;
}

export interface PhoneEdgePromise extends Promise<PhoneEdge>, Fragmentable {
  node: <T = PhonePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhoneEdgeSubscription
  extends Promise<AsyncIterator<PhoneEdge>>,
    Fragmentable {
  node: <T = PhoneSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Address",
    embedded: false
  },
  {
    name: "AddressKind",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  },
  {
    name: "Phone",
    embedded: false
  },
  {
    name: "PhoneKind",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/public-daffodilfoot-328/idea-shop-api/dev`
});
export const prisma = new Prisma();
